// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Note      Note[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  CREATED
  PENDING
  COMPLETED
  CANCELLED
}

model Note {
  id         Int       @id @default(autoincrement())
  user_id    String
  color      String
  content    String    @db.Text
  order      Int
  status     Status    @default(CREATED)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  User       User      @relation(fields: [user_id], references: [id])
  Message    Message[]

  @@map("notes")
}

model Conversation {
  id         Int       @id @default(autoincrement())
  title      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Message    Message[]

  @@map("conversations")
}

model Message {
  id              Int          @id @default(autoincrement())
  role            Role
  content         String       @db.Text
  createdAt       DateTime     @default(now())
  note_id         Int?
  action          Action?
  conversation_id Int
  note            Note?        @relation(fields: [note_id], references: [id], onDelete: SetNull)
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
}

enum Role {
  user
  assistant
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}
