// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Conversation Conversation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  CREATED
  PENDING
  COMPLETED
  CANCELLED
}

enum Color {
  red
  green
  blue
  pink
  yellow
  white
  gray
}

model Note {
  id             Int          @id @default(autoincrement())
  uuid           String       @default(uuid())
  content        String       @db.Text
  conversationId Int
  status         Status       @default(CREATED)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String?

  @@map("notes")
}

model Conversation {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  title      String?
  user_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Message    Message[]
  User       User      @relation(fields: [user_id], references: [id])
  Note       Note[]

  @@map("conversations")
}

model Message {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())

  action          Action?
  conversation_id Int
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
}

enum Role {
  user
  assistant
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}
